<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="teamproject.usedmarket.repository.mybatis.ItemMapper">
    <insert id="save" useGeneratedKeys="true" keyProperty="itemId">
        insert into item (item_type_id, title, price, content, sale_status, seller_member_id, views_count,
                          create_datetime)
        values (#{itemTypeId}, #{title}, #{price}, #{content}, #{saleStatus}, #{sellerMemberId}, #{viewsCount},
                #{createDatetime, jdbcType=TIMESTAMP})
    </insert>

    <update id="update">
        update item
        set title=#{updateParam.title},
            content=#{updateParam.content},
            price=#{updateParam.price},
            item_type_id=#{updateParam.itemTypeId},
            sale_status=#{updateParam.saleStatus},
            update_datetime=#{updateParam.updateDatetime, jdbcType=TIMESTAMP}
        where item_id = #{itemId}
    </update>

    <update id="incrementViewsCount">
        update item
        set views_count = views_count + 1
        where item_id = #{itemId}
    </update>

    <select id="findById" resultType="item">
        select *
        from item
        where item_id = #{itemId}
    </select>

    <select id="findMemberNameBySellerMemberId" resultType="java.lang.String">
        SELECT m.member_name
        FROM item i
                 JOIN member m ON i.seller_member_id = m.member_id
        WHERE i.seller_member_id = #{sellerMemberId}
          AND i.item_id = #{itemId}
    </select>

    <select id="findAll" resultType="item">
        select *
        from item
        order by item_id desc
    </select>

    <!--    <select id="findAll" resultType="Item">-->
    <!--        select id, item_name, price, quantity-->
    <!--        from item-->
    <!--        <where>-->
    <!--            <if test="itemName != null and itemName != ''">-->
    <!--                and item_name like concat('%',#{itemName},'%')-->
    <!--            </if>-->
    <!--            <if test="maxPrice != null">-->
    <!--                and price &lt;= #{maxPrice}-->
    <!--            </if>-->
    <!--        </where>-->
    <!--    </select>-->

    <delete id="delete">
        delete
        from item
        where item_id = #{itemId}
    </delete>

    <!-- 페이징을 고려한 아이템 목록 조회 -->
    <select id="findItemsWithPaging" parameterType="map" resultType="item">
        select *
        from item
        WHERE sale_status != 2
        <if test="itemType != null and itemType != ''">
            AND item_type_id = #{itemType}
        </if>
        <if test="regionId != null and regionId != ''">
            AND seller_member_id IN (SELECT member_id FROM member WHERE region_id = #{regionId})
        </if>
        order by create_datetime desc limit #{startRow, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>

    <!-- 전체 아이템 수 조회 -->
    <select id="countItems" resultType="int">
        select count(*)
        from item
    </select>

    <!-- 정렬에 따른 아이템 조회 -->
    <select id="findItemsSortedByRegistrationDate" parameterType="map" resultType="item">
        SELECT *
        FROM item
        WHERE sale_status != 2
        <if test="itemType != null and itemType != ''">
            AND item_type_id = #{itemType}
        </if>
        <if test="regionId != null and regionId != ''">
            AND seller_member_id IN (SELECT member_id FROM member WHERE region_id = #{regionId})
        </if>
        ORDER BY create_datetime DESC
        LIMIT #{startRow, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>

    <select id="findItemsSortedByViewsCount" parameterType="map" resultType="item">
        SELECT *
        FROM item
        WHERE sale_status != 2
        <if test="itemType != null and itemType != ''">
            AND item_type_id = #{itemType}
        </if>
        <if test="regionId != null and regionId != ''">
            AND seller_member_id IN (SELECT member_id FROM member WHERE region_id = #{regionId})
        </if>
        ORDER BY COALESCE(views_count, 0) DESC
        LIMIT #{startRow, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>

    <select id="findItemsSortedByLikesCount" parameterType="map" resultType="item">
        SELECT i.*
        FROM item i
        LEFT JOIN item_like l ON i.item_id = l.item_id
        WHERE i.sale_status != 2
        <if test="itemType != null and itemType != ''">
            AND i.item_type_id = #{itemType}
        </if>
        <if test="regionId != null and regionId != ''">
            AND i.seller_member_id IN (SELECT member_id FROM member WHERE region_id = #{regionId})
        </if>
        GROUP BY i.item_id
        ORDER BY COALESCE(COUNT(l.item_id), 0) DESC
        LIMIT #{startRow, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>

</mapper>